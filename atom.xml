<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Inhwan&#39;s Digital Space</title>
  
  <subtitle>Enjoy the life</subtitle>
  <link href="http://inhwancho.github.io/atom.xml" rel="self"/>
  
  <link href="http://inhwancho.github.io/"/>
  <updated>2023-01-16T04:01:58.792Z</updated>
  <id>http://inhwancho.github.io/</id>
  
  <author>
    <name>InhwanCho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>testing post</title>
    <link href="http://inhwancho.github.io/2023/11/17/Blogs_folder/2023-01-16-frontmattertest/"/>
    <id>http://inhwancho.github.io/2023/11/17/Blogs_folder/2023-01-16-frontmattertest/</id>
    <published>2023-11-16T15:00:00.000Z</published>
    <updated>2023-01-16T04:01:58.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="테스트-중입니다"><a href="#테스트-중입니다" class="headerlink" title="테스트 중입니다"></a>테스트 중입니다</h2><ul><li>testing</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">팁을 드리자면, scaffolds\post.md 파일에</span><br><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">widgets:</span><br><span class="line">  - type: toc</span><br><span class="line">    position: left</span><br><span class="line">sidebar:</span><br><span class="line">  left:</span><br><span class="line">    sticky: true</span><br><span class="line">toc: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>사이드바 제거</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Project</span><br><span class="line">widgets: null</span><br><span class="line">comment: false</span><br><span class="line">article:</span><br><span class="line">  - license: false</span><br><span class="line">--- </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;테스트-중입니다&quot;&gt;&lt;a href=&quot;#테스트-중입니다&quot; class=&quot;headerlink&quot; title=&quot;테스트 중입니다&quot;&gt;&lt;/a&gt;테스트 중입니다&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;testing&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="Blog" scheme="http://inhwancho.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="http://inhwancho.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Icarus 테마 커스터마이징</title>
    <link href="http://inhwancho.github.io/2023/01/16/Blogs_folder/2023-01-16-customizeing/"/>
    <id>http://inhwancho.github.io/2023/01/16/Blogs_folder/2023-01-16-customizeing/</id>
    <published>2023-01-15T15:00:00.000Z</published>
    <updated>2023-01-15T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="테마의-프로필-영역-사이즈-변경"><a href="#테마의-프로필-영역-사이즈-변경" class="headerlink" title="테마의 프로필 영역 사이즈 변경"></a>테마의 프로필 영역 사이즈 변경</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- layout/widget/profile.jsx --&gt;</span><br><span class="line"></span><br><span class="line">&#123;/* &lt;figure class=&quot;image is-128x128 mx-auto mb-2&quot;&gt; */&#125;</span><br><span class="line">&lt;figure class=&quot;image mx-auto mb-2&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="font-변경"><a href="#font-변경" class="headerlink" title="font 변경"></a>font 변경</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 51 line</span><br><span class="line">const fontCssUrl = &#123;</span><br><span class="line">  default: fontcdn(&quot;Ubuntu:wght@400;600&amp;family=Source+Code+Pro&quot;, &quot;css2&quot;),</span><br><span class="line">  cyberpunk: fontcdn(&quot;Oxanium:wght@300;400;600&amp;family=Roboto+Mono&quot;, &quot;css2&quot;),</span><br><span class="line">  nanumgothic: fontcdn(&quot;Nanum+Gothic:wght@400&amp;family=Roboto&quot;, &quot;css2&quot;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 151 line</span><br><span class="line">&lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot; /&gt;</span><br><span class="line">&lt;link href=&#123;fontCssUrl[&#x27;nanumgothic&#x27;]&#125; rel=&quot;stylesheet&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>8 line</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$family-sans-serif ?= &#x27;Nanum Gothic&#x27;, Ubuntu, Roboto, &#x27;Open Sans&#x27;, &#x27;Microsoft YaHei&#x27;, sans-serif</span><br><span class="line">// $family-sans-serif ?= Ubuntu, Roboto,&#x27;Nanum Gothic Coding&#x27;, &#x27;Open Sans&#x27;, &#x27;Microsoft YaHei&#x27;, sans-serif</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>4 line</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$article-font-size ?= 1.3rem</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;테마의-프로필-영역-사이즈-변경&quot;&gt;&lt;a href=&quot;#테마의-프로필-영역-사이즈-변경&quot; class=&quot;headerlink&quot; title=&quot;테마의 프로필 영역 사이즈 변경&quot;&gt;&lt;/a&gt;테마의 프로필 영역 사이즈 변경&lt;/h2&gt;&lt;figure class</summary>
      
    
    
    
    <category term="Errors" scheme="http://inhwancho.github.io/categories/Errors/"/>
    
    
    <category term="Blog" scheme="http://inhwancho.github.io/tags/Blog/"/>
    
    <category term="Icarus" scheme="http://inhwancho.github.io/tags/Icarus/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 코랩에서 웹캠 사용하기</title>
    <link href="http://inhwancho.github.io/2023/01/15/Study_folder/OpneCV/2023-01-15-webcam-in-colab/"/>
    <id>http://inhwancho.github.io/2023/01/15/Study_folder/OpneCV/2023-01-15-webcam-in-colab/</id>
    <published>2023-01-14T15:00:00.000Z</published>
    <updated>2023-01-14T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript를-이용하여-코랩에서-웹캠을-켜는-방법입니다"><a href="#Javascript를-이용하여-코랩에서-웹캠을-켜는-방법입니다" class="headerlink" title="Javascript를 이용하여 코랩에서 웹캠을 켜는 방법입니다"></a>Javascript를 이용하여 코랩에서 웹캠을 켜는 방법입니다</h2><ul><li>filename은 <code>photo.jpg</code>로 저장 되는데 변경해서 사용하시면 됩니다.</li><li>js로 함수를 설정합니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> display, Javascript</span><br><span class="line"><span class="keyword">from</span> google.colab.output <span class="keyword">import</span> eval_js</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">take_photo</span>(<span class="params">filename=<span class="string">&#x27;photo.jpg&#x27;</span>, quality=<span class="number">0.8</span></span>):</span><br><span class="line">  <span class="comment">#javascript 작성 시작</span></span><br><span class="line">  js = Javascript(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    async function takePhoto(quality) &#123;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      //div(공간) 생성</span></span><br><span class="line"><span class="string">      const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      //button 생성</span></span><br><span class="line"><span class="string">      const capture = document.createElement(&#x27;button&#x27;);</span></span><br><span class="line"><span class="string">      capture.textContent = &#x27;Capture&#x27;;</span></span><br><span class="line"><span class="string">      div.appendChild(capture);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      //video 생성</span></span><br><span class="line"><span class="string">      const video = document.createElement(&#x27;video&#x27;);</span></span><br><span class="line"><span class="string">      //비디오 모양 네모네모</span></span><br><span class="line"><span class="string">      video.style.display = &#x27;block&#x27;;</span></span><br><span class="line"><span class="string">      //카메라(웹캠) 불러오기</span></span><br><span class="line"><span class="string">      const stream = await navigator.mediaDevices.getUserMedia(&#123;video: true&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      //div 밑에 child 공간 추가</span></span><br><span class="line"><span class="string">      document.body.appendChild(div);</span></span><br><span class="line"><span class="string">      //공간에 video 넣기</span></span><br><span class="line"><span class="string">      div.appendChild(video);</span></span><br><span class="line"><span class="string">      //video와 웹캠 연결</span></span><br><span class="line"><span class="string">      video.srcObject = stream;</span></span><br><span class="line"><span class="string">      //await -&gt; 비동기식 처리 (thread와 관련)(async와 세트)</span></span><br><span class="line"><span class="string">      await video.play();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      // Resize the output to fit the video element.</span></span><br><span class="line"><span class="string">      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      // Wait for Capture to be clicked.</span></span><br><span class="line"><span class="string">      await new Promise((resolve) =&gt; capture.onclick = resolve);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      //canvas 생성</span></span><br><span class="line"><span class="string">      const canvas = document.createElement(&#x27;canvas&#x27;);</span></span><br><span class="line"><span class="string">      //크기 맞추기</span></span><br><span class="line"><span class="string">      canvas.width = video.videoWidth;</span></span><br><span class="line"><span class="string">      canvas.height = video.videoHeight;</span></span><br><span class="line"><span class="string">      //이미지 그리기</span></span><br><span class="line"><span class="string">      canvas.getContext(&#x27;2d&#x27;).drawImage(video, 0, 0);</span></span><br><span class="line"><span class="string">      //비디오 끄기</span></span><br><span class="line"><span class="string">      stream.getVideoTracks()[0].stop();</span></span><br><span class="line"><span class="string">      //div 삭제</span></span><br><span class="line"><span class="string">      div.remove();</span></span><br><span class="line"><span class="string">      // 파일 주소 반환</span></span><br><span class="line"><span class="string">      return canvas.toDataURL(&#x27;image/jpeg&#x27;, quality);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  display(js)</span><br><span class="line"> </span><br><span class="line">  data = eval_js(<span class="string">&#x27;takePhoto(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(quality))</span><br><span class="line">  <span class="comment">#웹 브라우저에서 데이터를 저장할때 base64로 저장</span></span><br><span class="line">  binary = b64decode(data.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(binary)</span><br><span class="line">  <span class="keyword">return</span> filename</span><br></pre></td></tr></table></figure><ul><li>실행 코드입니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  filename = take_photo()</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Saved to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(filename))</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Show the image which was just taken.</span></span><br><span class="line">  display(Image(filename))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">  <span class="comment"># Errors will be thrown if the user does not have a webcam or if they do not</span></span><br><span class="line">  <span class="comment"># grant the page permission to access it.</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">str</span>(err))</span><br></pre></td></tr></table></figure><ul><li>실행 결과 입니다.(<code>capture button</code>을 누르면 실행 종료)</li></ul><img width="714" alt="코랩 캡쳐 결과" src="https://user-images.githubusercontent.com/111936229/212513521-0c8d24b4-c925-4979-9f0a-427b40d15418.png">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Javascript를-이용하여-코랩에서-웹캠을-켜는-방법입니다&quot;&gt;&lt;a href=&quot;#Javascript를-이용하여-코랩에서-웹캠을-켜는-방법입니다&quot; class=&quot;headerlink&quot; title=&quot;Javascript를 이용하여 코랩에서 웹캠</summary>
      
    
    
    
    <category term="OpenCV" scheme="http://inhwancho.github.io/categories/OpenCV/"/>
    
    
    <category term="Study" scheme="http://inhwancho.github.io/tags/Study/"/>
    
    <category term="Colab" scheme="http://inhwancho.github.io/tags/Colab/"/>
    
    <category term="OpenCV" scheme="http://inhwancho.github.io/tags/OpenCV/"/>
    
    <category term="Webcam" scheme="http://inhwancho.github.io/tags/Webcam/"/>
    
  </entry>
  
  <entry>
    <title>깃허브블로그를 변경 후 기존 페이지 잔존 시</title>
    <link href="http://inhwancho.github.io/2023/01/13/Blogs_folder/2023-01-13-blogmoving/"/>
    <id>http://inhwancho.github.io/2023/01/13/Blogs_folder/2023-01-13-blogmoving/</id>
    <published>2023-01-12T15:00:00.000Z</published>
    <updated>2023-01-12T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="깃허브-블로그-기존-페이지-잔존-시"><a href="#깃허브-블로그-기존-페이지-잔존-시" class="headerlink" title="깃허브 블로그 기존 페이지 잔존 시"></a>깃허브 블로그 기존 페이지 잔존 시</h2><p>깃허브 블로그를 jekyll에서 hexo로 변경 후<br>로컬 서버에서는 잘 나오지만, 배포후에 메인 페이지는 출력이 잘 되는데, About, Archives, Tags, Categories가 기존의 블로그가 출력이 되었습니다.<br>결론은 <code>캐시를 지우지 않아서 그렇습니다.</code><br>css를  수정하고 새로 고침을 해도 서버에서 새로운 css를 받아오는것이 아닌 캐시에 저장된 이미 있는 캐시 파일만을 계속 받아오므로 이런 현상이 나올 수 있습니다.</p><ul><li>맥에서는 해당 페이지에서 <code>Command + Shift + R</code> 혹은 <code>캐시 삭제</code>로 해결 가능합니다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;깃허브-블로그-기존-페이지-잔존-시&quot;&gt;&lt;a href=&quot;#깃허브-블로그-기존-페이지-잔존-시&quot; class=&quot;headerlink&quot; title=&quot;깃허브 블로그 기존 페이지 잔존 시&quot;&gt;&lt;/a&gt;깃허브 블로그 기존 페이지 잔존 시&lt;/h2&gt;&lt;p&gt;깃허</summary>
      
    
    
    
    <category term="Errors" scheme="http://inhwancho.github.io/categories/Errors/"/>
    
    
    <category term="Blog" scheme="http://inhwancho.github.io/tags/Blog/"/>
    
    <category term="Errors" scheme="http://inhwancho.github.io/tags/Errors/"/>
    
    <category term="Logs" scheme="http://inhwancho.github.io/tags/Logs/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV에 관한 정보</title>
    <link href="http://inhwancho.github.io/2023/01/11/Study_folder/OpneCV/2023-01-11-basic-tip-cv2/"/>
    <id>http://inhwancho.github.io/2023/01/11/Study_folder/OpneCV/2023-01-11-basic-tip-cv2/</id>
    <published>2023-01-10T15:00:00.000Z</published>
    <updated>2023-01-10T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><ul><li><p>openCV를 주피터 환경에서 실행 시 동영상이나 사진의 (<code>x</code>)버튼을 누르면 주피터가 먹통이 될 때가 많다.</p><ul><li>키보드 ‘q’를 눌러서 끄는걸 권장한다.</li></ul></li><li><p>맥북 주피터 환경에서는 (<code>x</code>)버튼이 없어서 아래 명령어를 입력해주면 꺼지기는 한다.(터미널을 종료해도 꺼짐)</p><ul><li>다만, 파이참이나 VScode를 활용해 <code>.py파일을 인터프리터로 실행하기를 권장</code>한다.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cv2.destroyAllWindows()</span><br><span class="line">cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">cv2.waitKey(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="인터프리터로-실행-시-경로-설정하기"><a href="#인터프리터로-실행-시-경로-설정하기" class="headerlink" title="인터프리터로 실행 시 경로 설정하기"></a>인터프리터로 실행 시 경로 설정하기</h2><ul><li>인터프리터 환경(터미널환경)에서 실행 시 주피터의 실행 경로와 다를 수 있기 때문에 경로를 수정해줘야 오류가 안나온다.<ul><li>VScode에서 경로를 확인, 수정하는 방법은 다음과 같다.</li><li>먼저, 주피터 노트북에서도 아래의 명령어를 입력하고 실행을 한다.</li><li>그 다음 py 파일에에도 같은 입력을 하고 저장 &amp; 실행을 한다.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.executable)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출력 결과</span></span><br><span class="line"><span class="comment"># &#x27;/opt/anaconda3/bin/python&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>VScode의 경우는 <ul><li><code>명령 팔레트</code>를 열고 (Shift + command + P) <code>Python: Select Interpreter</code>을 검색 &amp; 누른다.</li><li>제 경우는 <code>/opt/anaconda3/bin/python</code> 앞의 출력 결과(주피터)에 동일한 결과를 선택한다. </li><li>실행해서 잘 되는지 확인한다.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;OpenCV&quot;&gt;&lt;a href=&quot;#OpenCV&quot; class=&quot;headerlink&quot; title=&quot;OpenCV&quot;&gt;&lt;/a&gt;OpenCV&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;openCV를 주피터 환경에서 실행 시 동영상이나 사진의 (&lt;code&gt;x&lt;/cod</summary>
      
    
    
    
    <category term="OpenCV" scheme="http://inhwancho.github.io/categories/OpenCV/"/>
    
    
    <category term="Study,OpenCV" scheme="http://inhwancho.github.io/tags/Study-OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV shape 변환</title>
    <link href="http://inhwancho.github.io/2023/01/11/Study_folder/OpneCV/2023-01-11-shape/"/>
    <id>http://inhwancho.github.io/2023/01/11/Study_folder/OpneCV/2023-01-11-shape/</id>
    <published>2023-01-10T15:00:00.000Z</published>
    <updated>2023-01-10T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openCV-사진-사이즈-변환"><a href="#openCV-사진-사이즈-변환" class="headerlink" title="openCV 사진 사이즈 변환"></a>openCV 사진 사이즈 변환</h2><ul><li>openCV에서 좌표는 아래 사진처럼 표현 됩니다.</li></ul><p><img src="https://user-images.githubusercontent.com/111936229/211719711-ece15f56-7602-42cb-81ce-890fb441a9dd.png" alt="스크린샷 2023-01-11 오후 1 45 04"></p><h3 id="Resize"><a href="#Resize" class="headerlink" title="Resize"></a>Resize</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lena.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment">#(512,512,3)</span></span><br><span class="line"></span><br><span class="line">imgResize = cv2.resize(img,(<span class="number">200</span>,<span class="number">150</span>))</span><br><span class="line"><span class="built_in">print</span>(imgResize.shape)</span><br><span class="line"><span class="comment">#(200,150,3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;origin&#x27;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;resize&#x27;</span>,imgResize)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><img width="713" alt="스크린샷 2023-01-11 오후 1 56 38" src="https://user-images.githubusercontent.com/111936229/211721385-670192b3-699c-44a8-9319-6ce9f7b45235.png"><h3 id="Crop"><a href="#Crop" class="headerlink" title="Crop"></a>Crop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lena.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment">#(512,512,3)</span></span><br><span class="line"></span><br><span class="line">imgResize = cv2.resize(img,(<span class="number">500</span>,<span class="number">400</span>))</span><br><span class="line"><span class="built_in">print</span>(imgResize.shape)</span><br><span class="line"><span class="comment">#(500,400,3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cv에서 crop은 [width, hight]입니다</span></span><br><span class="line">imgCropped = img[<span class="number">0</span>:<span class="number">200</span>,<span class="number">200</span>:<span class="number">400</span>]</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;resize&#x27;</span>,imgResize)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;cropped&#x27;</span>,imgCropped)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><img width="499" alt="스크린샷 2023-01-11 오후 2 06 28" src="https://user-images.githubusercontent.com/111936229/211722258-0aebaa91-908e-4298-8f68-6447d7de3fb3.png"><h3 id="Drawing"><a href="#Drawing" class="headerlink" title="Drawing"></a>Drawing</h3><ul><li>영역 만들기</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#0값은 black으로 표현됨</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 파란색 영역을 그림</span></span><br><span class="line">img[<span class="number">200</span>:<span class="number">300</span>, <span class="number">100</span>:<span class="number">500</span>] = <span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span> <span class="comment">#BGR(Blue, Green, Red)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;image1&#x27;</span>, img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><img width="505" alt="스크린샷 2023-01-11 오후 3 32 47" src="https://user-images.githubusercontent.com/111936229/211735317-36f4c027-a54c-4f91-b8ff-fed892b5c02f.png"><ul><li>line, rectangle 그리기</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">img = np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment">#start_point, end_point, color, thickness</span></span><br><span class="line">cv2.line(img,(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">300</span>,<span class="number">300</span>),color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;image1&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><img width="507" alt="스크린샷 2023-01-11 오후 3 36 20" src="https://user-images.githubusercontent.com/111936229/211735334-1b952961-a3c4-4c06-b300-54d5a928ccc8.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cv2.rectangle(img,(<span class="number">50</span>,<span class="number">50</span>),(<span class="number">500</span>,<span class="number">200</span>),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;image1&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><img width="510" alt="스크린샷 2023-01-11 오후 3 41 18" src="https://user-images.githubusercontent.com/111936229/211736029-28c5615a-7ab3-4792-af15-58b181df1c3f.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cv2.circle(img,(<span class="number">200</span>,<span class="number">200</span>), <span class="number">30</span>, (<span class="number">255</span>,<span class="number">20</span>,<span class="number">50</span>),thickness=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;image1&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><img width="502" alt="스크린샷 2023-01-11 오후 3 44 36" src="https://user-images.githubusercontent.com/111936229/211737151-6eaf5118-be4a-48f8-ab7d-732ce897bcfd.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cv2.putText(img, <span class="string">&#x27;THIS IS Text&#x27;</span>, (<span class="number">50</span>,<span class="number">300</span>),fontFace=cv2.FONT_HERSHEY_COMPLEX,fontScale=<span class="number">1</span>,</span><br><span class="line">color=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),thickness=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;image1&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><img width="508" alt="스크린샷 2023-01-11 오후 3 48 19" src="https://user-images.githubusercontent.com/111936229/211737145-9de7a045-0394-4cb8-8c1a-5528e46c8916.png">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;openCV-사진-사이즈-변환&quot;&gt;&lt;a href=&quot;#openCV-사진-사이즈-변환&quot; class=&quot;headerlink&quot; title=&quot;openCV 사진 사이즈 변환&quot;&gt;&lt;/a&gt;openCV 사진 사이즈 변환&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;openCV에서</summary>
      
    
    
    
    <category term="OpenCV" scheme="http://inhwancho.github.io/categories/OpenCV/"/>
    
    
    <category term="Study,OpenCV" scheme="http://inhwancho.github.io/tags/Study-OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 이미지 변환</title>
    <link href="http://inhwancho.github.io/2023/01/11/Study_folder/OpneCV/2023-01-11-img_change/"/>
    <id>http://inhwancho.github.io/2023/01/11/Study_folder/OpneCV/2023-01-11-img_change/</id>
    <published>2023-01-10T15:00:00.000Z</published>
    <updated>2023-01-10T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Grayscale-GaussianBlur"><a href="#Grayscale-GaussianBlur" class="headerlink" title="Grayscale, GaussianBlur"></a>Grayscale, GaussianBlur</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat_img.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 컬러 -&gt; 흑백으로 변환</span></span><br><span class="line">imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ksize == kernel size이므로 홀수만 사용 가능, sigmaX는 블러 정도라고 생각하면 편하며,</span></span><br><span class="line"><span class="comment"># 보통 -3~3사이의 값을 사용</span></span><br><span class="line">imgBlur = cv2.GaussianBlur(imgGray, ksize=(<span class="number">7</span>,<span class="number">7</span>),sigmaX=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;output&#x27;</span>,imgGray)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;output2&#x27;</span>,imgBlur)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>결과 imgGray</li></ul><img width="1020" alt="스크린샷 2023-01-11 오후 1 15 37" src="https://user-images.githubusercontent.com/111936229/211717325-d4d896f0-630b-4450-8977-a492fa691bd5.png"><ul><li>결과 imgBlur</li></ul><img width="1014" alt="스크린샷 2023-01-11 오후 1 25 13" src="https://user-images.githubusercontent.com/111936229/211717481-1721d754-f9f4-4ef3-bf6d-ea4e4b041f3a.png"><h2 id="Canny-Dialation"><a href="#Canny-Dialation" class="headerlink" title="Canny, Dialation"></a>Canny, Dialation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat_img.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">imgCanny = cv2.Canny(img,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>), np.uint8)</span><br><span class="line"><span class="comment"># iterations에 높은 수를 넣으면 윤곽선이 더 커집니다.</span></span><br><span class="line">imgDialation = cv2.dilate(imgCanny, kernel=kernel,iterations=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">imgEroded = cv2.erode(imgDialation, kernel=kernel, iterations=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;output3&#x27;</span>,imgCanny)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;output4&#x27;</span>,imgDialation)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;output5&#x27;</span>,imgEroded)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>결과 imgCanny</li></ul><img width="1019" alt="스크린샷 2023-01-11 오후 1 32 21" src="https://user-images.githubusercontent.com/111936229/211718228-2469f803-60dd-4930-bf20-7c1111fa6378.png"><ul><li>결과 imgDialation</li></ul><img width="1021" alt="스크린샷 2023-01-11 오후 1 37 22" src="https://user-images.githubusercontent.com/111936229/211718825-08992f1e-f210-491f-8b42-14c337b9c85c.png"><ul><li>결과 imgEroded</li></ul><img width="1023" alt="스크린샷 2023-01-11 오후 1 42 18" src="https://user-images.githubusercontent.com/111936229/211719388-c8fa40b9-a489-44b0-810d-bb201e9ed1fb.png">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Grayscale-GaussianBlur&quot;&gt;&lt;a href=&quot;#Grayscale-GaussianBlur&quot; class=&quot;headerlink&quot; title=&quot;Grayscale, GaussianBlur&quot;&gt;&lt;/a&gt;Grayscale, Gaussian</summary>
      
    
    
    
    <category term="OpenCV" scheme="http://inhwancho.github.io/categories/OpenCV/"/>
    
    
    <category term="Study,OpenCV" scheme="http://inhwancho.github.io/tags/Study-OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 기초</title>
    <link href="http://inhwancho.github.io/2023/01/11/Study_folder/OpneCV/2023-01-11-basic-cv2/"/>
    <id>http://inhwancho.github.io/2023/01/11/Study_folder/OpneCV/2023-01-11-basic-cv2/</id>
    <published>2023-01-10T15:00:00.000Z</published>
    <updated>2023-01-10T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OpenCV-이미지-확인"><a href="#OpenCV-이미지-확인" class="headerlink" title="OpenCV 이미지 확인"></a>OpenCV 이미지 확인</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># imread로 이미지 읽어오기</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat_img.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># imshow(&#x27;이미지 표시 이름&#x27;,이미지파일)입력</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;output&#x27;</span>,img)</span><br><span class="line">waitKey(<span class="number">0</span>) <span class="comment">#(0을 넣으면 == 계속 딜레이 - 대기하라는 의미)</span></span><br></pre></td></tr></table></figure><ul><li>imshow의 앞 ‘output’이름으로 img 파일이 출력됩니다.</li><li>사진, 영상을 끄려면 키보드 <code>q</code>를 누르시면 됩니다.</li></ul><img width="1026" alt="스크린샷 2023-01-11 오후 1 07 21" src="https://user-images.githubusercontent.com/111936229/211715668-3db417b0-b1ff-4eaa-9173-73241c8cf7e5.png"><h2 id="내장-카메라-웹캠-실행"><a href="#내장-카메라-웹캠-실행" class="headerlink" title="내장 카메라(웹캠) 실행"></a>내장 카메라(웹캠) 실행</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 웹캠</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>) <span class="comment">#노트북은 0번이 기본 내장 웹캠</span></span><br><span class="line"></span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">3</span>,<span class="number">640</span>) <span class="comment">#id_nubmer, width</span></span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">4</span>,<span class="number">480</span>) <span class="comment">#id_number, height</span></span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">10</span>,<span class="number">100</span>) <span class="comment">#id_number,bright</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 웹캠은 프레임 단위로 계속 출력되기 때문에 일반적으로 while문으로 실행한다.</span></span><br><span class="line"><span class="comment"># 키보드 &#x27;q&#x27;버튼을 누르면 실행이 종료됩니다.</span></span><br><span class="line"><span class="comment"># success는 Ture,False이고, img는 프레임 단위의 이미지로 저장되는 형태이다.</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    success, img = cap.read()</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;video_mp4&#x27;</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li>실행 결과</li></ul><img width="705" alt="스크린샷 2023-01-15 오전 11 00 45" src="https://user-images.githubusercontent.com/111936229/212514462-86cdbf15-6286-4151-9a76-55a2e15c7cad.png"><h2 id="이미지-저장"><a href="#이미지-저장" class="headerlink" title="이미지 저장"></a>이미지 저장</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">loaded_img = cv2.imread(<span class="string">&#x27;cat_img.jpg&#x27;</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;folder/folder1/img.jpg&#x27;</span>,loaded_img)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;OpenCV-이미지-확인&quot;&gt;&lt;a href=&quot;#OpenCV-이미지-확인&quot; class=&quot;headerlink&quot; title=&quot;OpenCV 이미지 확인&quot;&gt;&lt;/a&gt;OpenCV 이미지 확인&lt;/h2&gt;&lt;figure class=&quot;highlight pyth</summary>
      
    
    
    
    <category term="OpenCV" scheme="http://inhwancho.github.io/categories/OpenCV/"/>
    
    
    <category term="Study" scheme="http://inhwancho.github.io/tags/Study/"/>
    
    <category term="OpenCV" scheme="http://inhwancho.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>XAI(eXplainable AI) - 설명하는 AI</title>
    <link href="http://inhwancho.github.io/2023/01/10/Study_folder/TensorFlow/2023-01-10-XAI/"/>
    <id>http://inhwancho.github.io/2023/01/10/Study_folder/TensorFlow/2023-01-10-XAI/</id>
    <published>2023-01-09T15:00:00.000Z</published>
    <updated>2023-01-09T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="설명-가능한-AI-eXplainable-AI-XAI"><a href="#설명-가능한-AI-eXplainable-AI-XAI" class="headerlink" title="설명 가능한 AI(eXplainable AI) - XAI"></a>설명 가능한 AI(eXplainable AI) - XAI</h2><ul><li>XAI는 인공지능의 행위와 도출한 결과를 사람이 이해할 수 있는 형태로 이를 설명하는 방법론과 분야를 일컫는다. 흔히 인공지능 기술은 복잡한 일련의 과정(딥러닝)을 통해 결론을 도출하나, 그 과정을 설명할 수 없는 블랙 박스로 여겨진다. XAI는 이를 해소 시킬 수 있는 개념으로 인공지능의 신뢰성을 높이는 역할하고 있습니다.</li></ul><h3 id="1-CAM"><a href="#1-CAM" class="headerlink" title="(1) CAM"></a>(1) CAM</h3><pre><code>1 - flatten 작업 직전 단계에서 이때까지 만들어진 중간 결과들(feature map)을 수집2 - 중간 결과들에 대한 평균값을 구함3 - 평균값과 최종 예측값 사이에서 한번 더 학습 -&gt; 어떤 중간값이 최종 결정에 영향을 크게 줬는지 확인</code></pre><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">!pip install tf-explain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line">zipfile.ZipFile(<span class="string">&#x27;img.zip&#x27;</span>).extractall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> load_img, img_to_array</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.applications <span class="keyword">import</span> VGG16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tf_explain.core.grad_cam <span class="keyword">import</span> GradCAM</span><br><span class="line"><span class="keyword">from</span> tf_explain.core.occlusion_sensitivity <span class="keyword">import</span> OcclusionSensitivity</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</span><br></pre></td></tr></table></figure><ul><li>원본 사진 파일 확인</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(glob.glob(<span class="string">&#x27;*_0.jpg&#x27;</span>))</span><br><span class="line"><span class="comment"># [&#x27;yawl_0.jpg&#x27;, &#x27;squirrel_monkey_0.jpg&#x27;, &#x27;persian_cat_0.jpg&#x27;, </span></span><br><span class="line"><span class="comment"># &#x27;maltese_0.jpg&#x27;, &#x27;grand_piano_0.jpg&#x27;]</span></span><br><span class="line"></span><br><span class="line">images_originals = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img_name <span class="keyword">in</span> glob.glob(<span class="string">&quot;*_0.jpg&quot;</span>):</span><br><span class="line">    images_originals.append(mpimg.imread(img_name))</span><br><span class="line"></span><br><span class="line">plt.figure(figsize = (<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(images_originals):</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">5</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(img)</span><br></pre></td></tr></table></figure><img width="1286" alt="스크린샷 2023-01-10 오전 10 50 11" src="https://user-images.githubusercontent.com/111936229/211443584-83cdcb57-9d75-4f79-90ba-2364b7469d0b.png"><ul><li>이제 VGG16에서 이미지 분류된 결과를 통해 원본 사진을 왜 카테고리(input_list)로 분류하였는지를 확인하겠습니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">model = VGG16(weights=<span class="string">&quot;imagenet&quot;</span>, include_top=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_list = [<span class="string">&quot;maltese&quot;</span>, <span class="string">&quot;persian_cat&quot;</span>, <span class="string">&quot;squirrel_monkey&quot;</span>, <span class="string">&quot;grand_piano&quot;</span>, <span class="string">&quot;yawl&quot;</span>]</span><br><span class="line">imagenet_index = [<span class="string">&quot;153&quot;</span>, <span class="string">&quot;283&quot;</span>, <span class="string">&quot;382&quot;</span>, <span class="string">&quot;579&quot;</span>, <span class="string">&quot;914&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#gradient CAM 알고리즘으로 XAI 생성</span></span><br><span class="line">explainer = GradCAM()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> li, i <span class="keyword">in</span> <span class="built_in">zip</span>(input_list, imagenet_index):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    img = (load_img(<span class="string">f&#x27;<span class="subst">&#123;li&#125;</span>_0.jpg&#x27;</span>, target_size=(<span class="number">224</span>,<span class="number">224</span>)))</span><br><span class="line">    img = img_to_array(img)</span><br><span class="line">    data = ([img], <span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="comment"># print(&#x27;--&#x27;*50)</span></span><br><span class="line">    grid = explainer.explain(data, model, <span class="built_in">int</span>(i))<span class="comment"># 설명하는 ai 생성</span></span><br><span class="line">    explainer.save(grid, <span class="string">&#x27;.&#x27;</span>, <span class="string">f&#x27;./<span class="subst">&#123;li&#125;</span>_cam.jpg&#x27;</span>) <span class="comment">#_cam.jpg파일이란 이름으로 저장</span></span><br></pre></td></tr></table></figure><ul><li>저장된 사진을 확인해봅시다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#gradient CAM 알고리즘이 적용된 이미지를 저장할 리스트 정의</span></span><br><span class="line">images_cams = []</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> glob.glob(<span class="string">&quot;*_cam.jpg&quot;</span>):</span><br><span class="line">    images_cams.append(mpimg.imread(img))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출력</span></span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(images_cams):</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">5</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(img)</span><br></pre></td></tr></table></figure><img width="1265" alt="스크린샷 2023-01-10 오전 11 01 44" src="https://user-images.githubusercontent.com/111936229/211445060-ccee085e-ff83-4b22-96e5-19b73e226fcc.png"><h3 id="2-이미지를-일부를-가려서-가려진-일부가-이미지-분류하는데-있어서-어느-정도-영향을-줬는지-계산하는-방식"><a href="#2-이미지를-일부를-가려서-가려진-일부가-이미지-분류하는데-있어서-어느-정도-영향을-줬는지-계산하는-방식" class="headerlink" title="(2) 이미지를 일부를 가려서, 가려진 일부가 이미지 분류하는데 있어서 어느 정도 영향을 줬는지 계산하는 방식"></a>(2) 이미지를 일부를 가려서, 가려진 일부가 이미지 분류하는데 있어서 어느 정도 영향을 줬는지 계산하는 방식</h3><p>작성 중</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;설명-가능한-AI-eXplainable-AI-XAI&quot;&gt;&lt;a href=&quot;#설명-가능한-AI-eXplainable-AI-XAI&quot; class=&quot;headerlink&quot; title=&quot;설명 가능한 AI(eXplainable AI) - XAI&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="Deeplearning,Study,Tensorflow" scheme="http://inhwancho.github.io/tags/Deeplearning-Study-Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>파이토치에서 model 정보(summary) 확인</title>
    <link href="http://inhwancho.github.io/2023/01/09/Study_folder/Pytorch/2023-01-09-model-info/"/>
    <id>http://inhwancho.github.io/2023/01/09/Study_folder/Pytorch/2023-01-09-model-info/</id>
    <published>2023-01-08T15:00:00.000Z</published>
    <updated>2023-01-08T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="파이토치에서-만들어진-모델-정보-확인하기"><a href="#파이토치에서-만들어진-모델-정보-확인하기" class="headerlink" title="파이토치에서 만들어진 모델 정보 확인하기"></a>파이토치에서 만들어진 모델 정보 확인하기</h2><ul><li>keras에서는 <code>model.summary()</code>의 내장 함수를 이용하면 간단하게 모델 정보를 확인 가능합니다.</li><li>파이토치에서도 여러 가지 방법을 통해 정보를 확인할 수 있습니다.</li></ul><h3 id="1-print를-하면-summary가-출력된다"><a href="#1-print를-하면-summary가-출력된다" class="headerlink" title="1. print를 하면 summary가 출력된다"></a>1. <code>print</code>를 하면 summary가 출력된다</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><img width="943" alt="스크린샷 2023-01-09 오후 2 47 20" src="https://user-images.githubusercontent.com/111936229/211247463-dffbfede-2625-4d50-b1f7-e48369abcc2f.png"><h3 id="2-torchinfo-통해-summary를-출력한다"><a href="#2-torchinfo-통해-summary를-출력한다" class="headerlink" title="2. torchinfo 통해 summary를 출력한다"></a>2. <code>torchinfo</code> 통해 summary를 출력한다</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!pip install torchinfo</span><br><span class="line"><span class="keyword">from</span> torchinfo <span class="keyword">import</span> summary</span><br><span class="line"></span><br><span class="line">summary(model)</span><br></pre></td></tr></table></figure><img width="719" alt="스크린샷 2023-01-09 오후 2 47 04" src="https://user-images.githubusercontent.com/111936229/211247503-5e2ae136-14ec-4091-b65f-1cec173f4982.png"><h3 id="3-torchsummary를-통해-summary출력-input-size를-알아야만-출력-가능"><a href="#3-torchsummary를-통해-summary출력-input-size를-알아야만-출력-가능" class="headerlink" title="3. torchsummary를 통해 summary출력 (input_size를 알아야만 출력 가능)"></a>3. <code>torchsummary</code>를 통해 summary출력 (input_size를 알아야만 출력 가능)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!pip install torchsummary</span><br><span class="line"><span class="keyword">from</span> torchsummary <span class="keyword">import</span> summary</span><br><span class="line"></span><br><span class="line">summary(model, input_size = (<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>), batch_size= <span class="number">6</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;파이토치에서-만들어진-모델-정보-확인하기&quot;&gt;&lt;a href=&quot;#파이토치에서-만들어진-모델-정보-확인하기&quot; class=&quot;headerlink&quot; title=&quot;파이토치에서 만들어진 모델 정보 확인하기&quot;&gt;&lt;/a&gt;파이토치에서 만들어진 모델 정보 확인</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="Deeplearning,Study,Pytorch" scheme="http://inhwancho.github.io/tags/Deeplearning-Study-Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Attention 코드로 구현하기</title>
    <link href="http://inhwancho.github.io/2023/01/08/Study_folder/NLP(Natural_Language_Processing)/2023-01-08-attention-imp/"/>
    <id>http://inhwancho.github.io/2023/01/08/Study_folder/NLP(Natural_Language_Processing)/2023-01-08-attention-imp/</id>
    <published>2023-01-07T15:00:00.000Z</published>
    <updated>2023-01-07T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스케일드-닷-프로덕트-어텐션"><a href="#스케일드-닷-프로덕트-어텐션" class="headerlink" title="스케일드 닷-프로덕트 어텐션"></a>스케일드 닷-프로덕트 어텐션</h2><ul><li>참조 : &lt;<a href="https://wikidocs.net/31379">위키독스</a>&gt;</li><li>닷-프로덕트 어텐션(dot-product attention)에서 스케일링하는 것을 추가하면<br><br> <code>스케일드 닷-프로덕트 어텐션(Scaled dot-product Attention)</code>이라고 합니다</li><li>scaled_dot_product_attention을 tensorflow로 구현, 살펴보겠습니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scaled_dot_product_attention</span>(<span class="params">query, key, value, mask</span>):</span><br><span class="line">  <span class="comment"># query 크기    : (batch_size, num_heads, query의 문장 길이, d_model/num_heads)</span></span><br><span class="line">  <span class="comment"># key 크기      : (batch_size, num_heads, key의 문장 길이,   d_model/num_heads)</span></span><br><span class="line">  <span class="comment"># value 크기    : (batch_size, num_heads, value의 문장 길이, d_model/num_heads)</span></span><br><span class="line">  <span class="comment"># padding_mask : (batch_size, 1, 1, key의 문장 길이)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Q와 K의 곱. 어텐션 스코어 행렬.</span></span><br><span class="line">  matmul_qk = tf.matmul(query, key, transpose_b=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 스케일링</span></span><br><span class="line">  depth = tf.cast(tf.shape(key)[-<span class="number">1</span>], tf.float32)</span><br><span class="line">  logits = matmul_qk / tf.math.sqrt(depth)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 마스킹, 매우 작은 값이므로 소프트맥스 함수에 의해 0이 된다.</span></span><br><span class="line">  <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    logits += (mask * -<span class="number">1e9</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 소프트맥스 함수는 마지막 차원인 key의 문장 길이 방향으로 수행(axis=-1)</span></span><br><span class="line">  <span class="comment"># attention weight : (batch_size, num_heads, query의 문장 길이, key의 문장 길이)</span></span><br><span class="line">  attention_weights = tf.nn.softmax(logits, axis=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># output : (batch_size, num_heads, query의 문장 길이, d_model/num_heads)</span></span><br><span class="line">  output = tf.matmul(attention_weights, value)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> output, attention_weights</span><br></pre></td></tr></table></figure><h3 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h3><ul><li>temp_q의 값 [0, 10, 0]은 Key에 해당하는 temp_k의 두번째 값 [0, 10, 0]과 일치하게 설정</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 임의의 Query, Key, Value인 Q, K, V 행렬 생성</span></span><br><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>) <span class="comment">#옵션 넣어줘야 보기 편함(소수점 반올림)</span></span><br><span class="line">temp_k = tf.constant([[<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                      [<span class="number">0</span>,<span class="number">10</span>,<span class="number">0</span>],</span><br><span class="line">                      [<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>],</span><br><span class="line">                      [<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>]], dtype=tf.float32)  <span class="comment"># (4, 3)</span></span><br><span class="line"></span><br><span class="line">temp_v = tf.constant([[<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                      [<span class="number">10</span>,<span class="number">0</span>],</span><br><span class="line">                      [<span class="number">100</span>,<span class="number">5</span>],</span><br><span class="line">                      [<span class="number">1000</span>,<span class="number">6</span>]], dtype=tf.float32)  <span class="comment"># (4, 2)</span></span><br><span class="line">temp_q = tf.constant([[<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>]], dtype=tf.float32)  <span class="comment"># (1, 3) #transpose_b</span></span><br></pre></td></tr></table></figure><ul><li>어텐션 분포는 [0, 1, 0, 0]의 값을 가지며</li><li>Value의 두번째 값인 [10, 0]이 출력되는 것을 확인할 수 있습니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수 실행</span></span><br><span class="line">temp_out, temp_attn = scaled_dot_product_attention(temp_q, temp_k, temp_v, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(temp_attn) <span class="comment"># 어텐션 분포(어텐션 가중치의 나열)</span></span><br><span class="line"><span class="comment"># tf.Tensor([[0. 1. 0. 0.]], shape=(1, 4), dtype=float32)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(temp_out) <span class="comment"># 어텐션 값</span></span><br><span class="line"><span class="comment"># tf.Tensor([[10.  0.]], shape=(1, 2), dtype=float32)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;스케일드-닷-프로덕트-어텐션&quot;&gt;&lt;a href=&quot;#스케일드-닷-프로덕트-어텐션&quot; class=&quot;headerlink&quot; title=&quot;스케일드 닷-프로덕트 어텐션&quot;&gt;&lt;/a&gt;스케일드 닷-프로덕트 어텐션&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;참조 : &amp;lt;&lt;a </summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="NLP,Study" scheme="http://inhwancho.github.io/tags/NLP-Study/"/>
    
  </entry>
  
  <entry>
    <title>tf.cast()</title>
    <link href="http://inhwancho.github.io/2023/01/08/Study_folder/TensorFlow/2023-01-08-cast/"/>
    <id>http://inhwancho.github.io/2023/01/08/Study_folder/TensorFlow/2023-01-08-cast/</id>
    <published>2023-01-07T15:00:00.000Z</published>
    <updated>2023-01-07T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tf-cast-x-dtype-name-x3D-None"><a href="#tf-cast-x-dtype-name-x3D-None" class="headerlink" title="tf.cast(x, dtype, name&#x3D;None)"></a>tf.cast(x, dtype, name&#x3D;None)</h2><blockquote><p>The operation casts x (in case of Tensor) or x.values (in case of SparseTensor or IndexedSlices) to dtype.<br><br>해석하자면 x값을 새로운 형태의 dtype으로 캐스팅한다는 의미입니다.{:.prompt-info}</p></blockquote><ul><li><p>부동 소수점형에서 정수형으로 바꾼 경우 소수점을 버린다.</p></li><li><p>Boolean으로 참조한 경우 True이면 1, False이면 0을 출력한다.</p></li><li><p>예시를 보면 이해가 될겁니다.</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = tf.constant([<span class="number">1.8</span>, <span class="number">2.2</span>, <span class="number">3.3</span>], dtype=tf.float32)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># tf.Tensor([1.8 2.2 3.3], shape=(3,), dtype=float32)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tf.cast(x, tf.int32)</span><br><span class="line"><span class="comment"># 출력 결과를 보시면 반올림, 내림이 아닌 소수점을 버립니다.</span></span><br><span class="line"><span class="comment"># &lt;tf.Tensor: shape=(3,), dtype=int32, numpy=array([1, 2, 3], dtype=int32)&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tf.cast(x&gt;<span class="number">2</span>, tf.float32)</span><br><span class="line"><span class="comment"># &lt;tf.Tensor: shape=(3,), dtype=float32, numpy=array([0., 1., 1.], dtype=float32)&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tf-cast-x-dtype-name-x3D-None&quot;&gt;&lt;a href=&quot;#tf-cast-x-dtype-name-x3D-None&quot; class=&quot;headerlink&quot; title=&quot;tf.cast(x, dtype, name&amp;#x3D;None)&quot;</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="Deeplearning,Study,Tensorflow" scheme="http://inhwancho.github.io/tags/Deeplearning-Study-Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>torch를 boolean값으로 변경</title>
    <link href="http://inhwancho.github.io/2023/01/08/Study_folder/Pytorch/2023-01-08-boolean/"/>
    <id>http://inhwancho.github.io/2023/01/08/Study_folder/Pytorch/2023-01-08-boolean/</id>
    <published>2023-01-07T15:00:00.000Z</published>
    <updated>2023-01-07T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="operation-참조"><a href="#operation-참조" class="headerlink" title="operation 참조"></a>operation 참조</h2><ul><li>예시를 통해 알아보겠습니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x=torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x&gt;<span class="number">2</span>)</span><br><span class="line"><span class="comment"># tensor([False, False,  True,  True])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((x&gt;<span class="number">2</span>).<span class="built_in">type</span>(torch.float32))</span><br><span class="line"><span class="comment"># tensor([0., 0., 1., 1.])</span></span><br></pre></td></tr></table></figure><h2 id="gt-함수를-활용"><a href="#gt-함수를-활용" class="headerlink" title="gt() 함수를 활용"></a>gt() 함수를 활용</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x=torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.gt(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># tensor([False, False,  True,  True])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.gt(<span class="number">2</span>).to(torch.int32))</span><br><span class="line"><span class="comment"># tensor([0, 0, 1, 1], dtype=torch.int32)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;operation-참조&quot;&gt;&lt;a href=&quot;#operation-참조&quot; class=&quot;headerlink&quot; title=&quot;operation 참조&quot;&gt;&lt;/a&gt;operation 참조&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;예시를 통해 알아보겠습니다.&lt;/li&gt;
&lt;/u</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="Deeplearning,Study,Pytorch" scheme="http://inhwancho.github.io/tags/Deeplearning-Study-Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>nn.Embedding</title>
    <link href="http://inhwancho.github.io/2023/01/07/Study_folder/Pytorch/2023-01-07-nn.Embedding/"/>
    <id>http://inhwancho.github.io/2023/01/07/Study_folder/Pytorch/2023-01-07-nn.Embedding/</id>
    <published>2023-01-06T15:00:00.000Z</published>
    <updated>2023-01-06T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nn-Embedding"><a href="#nn-Embedding" class="headerlink" title="nn.Embedding"></a>nn.Embedding</h2><ul><li><p>출처 : &lt;<a href="https://wikidocs.net/64779">위키독스</a>&gt;</p></li><li><p>임베딩 층(embedding layer)을 만들어 훈련 데이터로부터 처음부터 임베딩 벡터를 학습하는 방법을 <code>nn.Embedding</code>을 이용하여 구현합니다.</p></li><li><p>주요 파라미터는 2개입니다.</p><ul><li>num_embeddings : 임베딩을 할 단어들의 개수. (단어 집합의 크기)</li><li>embedding_dim : 임베딩 할 벡터의 차원입니다. (사용자 정의)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line">train_data = <span class="string">&#x27;we can do lots of things like climbing do&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 중복을 제거한 단어들의 집합인 단어 집합 생성.(num_embeddings 인자)</span></span><br><span class="line">word_set = <span class="built_in">set</span>(train_data.split())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 단어 집합의 각 단어에 고유한 정수 맵핑.</span></span><br><span class="line">vocab = &#123;tkn: i+<span class="number">2</span> <span class="keyword">for</span> i, tkn <span class="keyword">in</span> <span class="built_in">enumerate</span>(word_set)&#125;</span><br><span class="line">vocab[<span class="string">&#x27;&lt;unk&gt;&#x27;</span>] = <span class="number">0</span></span><br><span class="line">vocab[<span class="string">&#x27;&lt;pad&gt;&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(vocab)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;things&#x27;: 2, &#x27;lots&#x27;: 3, &#x27;can&#x27;: 4, &#x27;like&#x27;: 5, &#x27;do&#x27;: 6, &#x27;climbing&#x27;: 7, &#x27;of&#x27;: 8, &#x27;we&#x27;: 9, &#x27;&lt;unk&gt;&#x27;: 0, &#x27;&lt;pad&gt;&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 단어 집합의 크기의 행을 가지는 임베딩 테이블 생성</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line">embedding_layer = nn.Embedding(num_embeddings=<span class="built_in">len</span>(vocab), </span><br><span class="line">                               embedding_dim=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">embedding_layer</span><br><span class="line"><span class="comment"># Embedding(10, 3, padding_idx=1)</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="built_in">print</span>(embedding_layer.weight)</span><br><span class="line"></span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([[ <span class="number">0.2915</span>,  <span class="number">0.8197</span>,  <span class="number">0.1080</span>],</span><br><span class="line">        [ <span class="number">0.4103</span>,  <span class="number">1.2429</span>, -<span class="number">0.7658</span>],</span><br><span class="line">        [ <span class="number">0.4185</span>, -<span class="number">0.0410</span>,  <span class="number">2.1945</span>],</span><br><span class="line">        [-<span class="number">0.9706</span>, -<span class="number">0.6196</span>, -<span class="number">1.3778</span>],</span><br><span class="line">        [-<span class="number">1.8044</span>, -<span class="number">0.8070</span>, -<span class="number">1.0277</span>],</span><br><span class="line">        [ <span class="number">0.7752</span>, -<span class="number">0.1011</span>,  <span class="number">1.5459</span>],</span><br><span class="line">        [ <span class="number">0.2195</span>,  <span class="number">1.2008</span>,  <span class="number">0.1253</span>],</span><br><span class="line">        [ <span class="number">0.6568</span>,  <span class="number">1.3255</span>,  <span class="number">0.5347</span>],</span><br><span class="line">        [-<span class="number">1.2790</span>,  <span class="number">0.3015</span>, -<span class="number">0.2819</span>],</span><br><span class="line">        [-<span class="number">0.0371</span>, -<span class="number">0.0291</span>, -<span class="number">0.2894</span>]], requires_grad=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;nn-Embedding&quot;&gt;&lt;a href=&quot;#nn-Embedding&quot; class=&quot;headerlink&quot; title=&quot;nn.Embedding&quot;&gt;&lt;/a&gt;nn.Embedding&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;출처 : &amp;lt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="Deeplearning,Study,Pytorch" scheme="http://inhwancho.github.io/tags/Deeplearning-Study-Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>torch.tril</title>
    <link href="http://inhwancho.github.io/2023/01/07/Study_folder/Pytorch/2023-01-07-tril/"/>
    <id>http://inhwancho.github.io/2023/01/07/Study_folder/Pytorch/2023-01-07-tril/</id>
    <published>2023-01-06T15:00:00.000Z</published>
    <updated>2023-01-06T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="torch-tril"><a href="#torch-tril" class="headerlink" title="torch.tril"></a>torch.tril</h2><ul><li><p><code>torch.tril(input, diagonal=0, *, out=None)</code></p></li><li><p>행렬의 아래쪽 삼각형 부분 (2 차원 텐서) 또는 행렬의 배치 input 을 반환합니다 .[행렬의 오른쪽 부분을(0으로 만듬)]</p></li><li><p>attention 구조의 mask를 만들 때 많이 사용되는 함수입니다.</p></li><li><p>무슨 말인지 이해가 잘 안가실겁니다. 예제 출력 코드를 보면 바로 이해가 갈겁니다.</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones((<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">torch.tril(a)</span><br><span class="line"></span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = torch.ones((<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">torch.tril(a, diagonal=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;torch-tril&quot;&gt;&lt;a href=&quot;#torch-tril&quot; class=&quot;headerlink&quot; title=&quot;torch.tril&quot;&gt;&lt;/a&gt;torch.tril&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;torch.tril(input, diago</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="Deeplearning,Study,Pytorch" scheme="http://inhwancho.github.io/tags/Deeplearning-Study-Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Squeeze, Unsqueeze</title>
    <link href="http://inhwancho.github.io/2023/01/06/Study_folder/Pytorch/2023-01-06-squeeze/"/>
    <id>http://inhwancho.github.io/2023/01/06/Study_folder/Pytorch/2023-01-06-squeeze/</id>
    <published>2023-01-05T15:00:00.000Z</published>
    <updated>2023-01-05T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="squeeze"><a href="#squeeze" class="headerlink" title="squeeze"></a>squeeze</h2><blockquote><p>squeeze와 unsqueeze는 1인 차원을 제거, 생성할때 매우 유용한 함수이다.</p></blockquote><ul><li>squeeze는 차원이 1인 차원을 제거해준다.(default값)</li><li>차원을 설정해주면 그 차원만 제거한다.(1인 차원만 제거되니 참고)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.rand(<span class="number">3</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([3, 20, 1, 1])</span></span><br><span class="line"></span><br><span class="line">x = x.squeeze()</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([3, 20])</span></span><br><span class="line"></span><br><span class="line">x = torch.squeeze(x, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([3, 20])</span></span><br></pre></td></tr></table></figure><h2 id="unsqueeze"><a href="#unsqueeze" class="headerlink" title="unsqueeze"></a>unsqueeze</h2><ul><li>unsqueeze는 차원이 1인 차원을 생성해준다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand(<span class="number">3</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([3, 20, 30, 40])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = x.unsqueeze(dim=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([3, 1, 20, 30, 40])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = torch.rand(<span class="number">3</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([3, 20, 30, 40])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = torch.unsqueeze(x,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([3, 1, 20, 30, 40])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = torch.rand(<span class="number">3</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([3, 20, 30, 40])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = x.unsqueeze(dim = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([1, 3, 20, 30, 40])</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;squeeze&quot;&gt;&lt;a href=&quot;#squeeze&quot; class=&quot;headerlink&quot; title=&quot;squeeze&quot;&gt;&lt;/a&gt;squeeze&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;squeeze와 unsqueeze는 1인 차원을 제거, 생성할때 매</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="Deeplearning,Study,Pytorch" scheme="http://inhwancho.github.io/tags/Deeplearning-Study-Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Einsum (Einstein Summation)</title>
    <link href="http://inhwancho.github.io/2023/01/05/Study_folder/Basic_study/2023-01-05-einsum/"/>
    <id>http://inhwancho.github.io/2023/01/05/Study_folder/Basic_study/2023-01-05-einsum/</id>
    <published>2023-01-04T15:00:00.000Z</published>
    <updated>2023-01-04T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="einsum"><a href="#einsum" class="headerlink" title="einsum"></a>einsum</h2><ul><li><p>참고 : &lt;<a href="https://www.youtube.com/watch?v=pkVwUVEHmfI">Aladdin youtube</a>&gt;</p></li><li><p><code>Einsum</code>은 Einstein Summation Convention으로 연산을 하는 방법입니다.</p></li><li><p>연산을 통해 내적(Dot products), 외적(Outer porducts), 전치(Transpose), 행렬곱(Matmul) 등을 표현할 수 있으며,</p></li><li><p>형태(dim, shape)을 관리할 때 매우 유용하다.</p></li></ul><blockquote><p>einsum은 numpy, torch, tensorflow에서 사용가능하다.<br>ex) numpy.einsum(), torch.einsum(), tensorflow.einsum()</p></blockquote><ul><li>간단하게 아래처럼 사용할 수 있습니다.(차원 표현으로 <code>ijk...</code> 으로 많이 사용됩니다.)</li><li>a,b 중 같은 차원이라면 동일한 알파벳으로 입력해주기.</li></ul><blockquote><p>einsum의 통상적인 사용방법은 다음과 같습니다. torch인 a.shape&#x3D;&#x3D;(2,3,4),b.shape(3,4,1)가 있다면,<br><br>torch.einsum(‘ijk , jka -&gt; jki’ , [a,b])<br><br>결과는 [3,4,2] 라는 식으로 나옵니다.</p></blockquote><ul><li>수학적으로 표현하자면 너무 복잡해지니 예시를 통해 간단한 사용 방법을 익혀봅시다.</li></ul><h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MATRIX TRANSPOSE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij-&gt;ji&#x27;</span>, [a])</span><br><span class="line"></span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">5</span>]]) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SUM</span></span><br><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij-&gt;&#x27;</span>, [a])</span><br><span class="line"></span><br><span class="line">tensor(<span class="number">15</span>) <span class="comment"># 6!</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  COLUMN SUM</span></span><br><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij-&gt;j&#x27;</span>, [a])</span><br><span class="line"></span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="comment">#  0+3 , 1+4,  2+5</span></span><br><span class="line">tensor([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ROW SUM</span></span><br><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij-&gt;i&#x27;</span>, [a])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],  <span class="comment">#0+1+2-&gt;3</span></span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]]) <span class="comment">#3+4+5-&gt;12</span></span><br><span class="line"></span><br><span class="line">tensor([ <span class="number">3</span>, <span class="number">12</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MATRIX-VECTOR MULTIPLICATION</span></span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ik,k-&gt;i&#x27;</span>, [a, b])</span><br><span class="line"></span><br><span class="line">tensor([ <span class="number">5</span>, <span class="number">14</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 행렬곱과 값이 동일</span></span><br><span class="line">np.matmul(a,b) </span><br><span class="line"></span><br><span class="line">tensor([ <span class="number">5</span>, <span class="number">14</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MATRIX-MATRIX MULTIPLICATION</span></span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ik,kj-&gt;ij&#x27;</span>, [a, b])</span><br><span class="line"></span><br><span class="line">tensor([[ <span class="number">25</span>,  <span class="number">28</span>,  <span class="number">31</span>,  <span class="number">34</span>,  <span class="number">37</span>],</span><br><span class="line">        [ <span class="number">70</span>,  <span class="number">82</span>,  <span class="number">94</span>, <span class="number">106</span>, <span class="number">118</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DOT PRODUCT(vector)</span></span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">3</span>,<span class="number">6</span>)  <span class="comment"># [3, 4, 5]</span></span><br><span class="line">torch.einsum(<span class="string">&#x27;i,i-&gt;&#x27;</span>, [a, b])</span><br><span class="line"></span><br><span class="line">tensor(<span class="number">14</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DOT PRODUCT(matrix)</span></span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">6</span>,<span class="number">12</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij,ij-&gt;&#x27;</span>, [a, b])</span><br><span class="line"></span><br><span class="line">tensor(<span class="number">145</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HADAMARD PRODUCT</span></span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">6</span>,<span class="number">12</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij,ij-&gt;ij&#x27;</span>, [a, b])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OUTER PRODUCT</span></span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">3</span>,<span class="number">7</span>)  <span class="comment">#[3, 4, 5, 6]</span></span><br><span class="line">c = torch.einsum(<span class="string">&#x27;i,j-&gt;ij&#x27;</span>, [a, b])</span><br><span class="line"><span class="built_in">print</span>(a.shape,b.shape,c.shape)</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">torch.Size([<span class="number">3</span>]) torch.Size([<span class="number">4</span>]) torch.Size([<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">tensor([[ <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>]])</span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;einsum&quot;&gt;&lt;a href=&quot;#einsum&quot; class=&quot;headerlink&quot; title=&quot;einsum&quot;&gt;&lt;/a&gt;einsum&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;참고 : &amp;lt;&lt;a href=&quot;https://www.youtube.com/wat</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="Study,Python" scheme="http://inhwancho.github.io/tags/Study-Python/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 에러 생성 및 처리 방법(assert, raise, try)</title>
    <link href="http://inhwancho.github.io/2023/01/05/Study_folder/Basic_study/2023-01-05-assert/"/>
    <id>http://inhwancho.github.io/2023/01/05/Study_folder/Basic_study/2023-01-05-assert/</id>
    <published>2023-01-04T15:00:00.000Z</published>
    <updated>2023-01-04T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Assert-사용-방법"><a href="#Assert-사용-방법" class="headerlink" title="Assert 사용 방법"></a>Assert 사용 방법</h2><ul><li>예외 처리(try, raise)함수와 달리 <code>assert</code>는 <code>가정 설명문</code> 입니다.</li><li>즉, 어떤 조건이 True면 pass되고, 아니면 Error(오류)를 생성합니다.</li><li>방법은 간단합니다. </li><li><code>assert (가정법), &#39;에러 메시지 작성&#39;</code>이렇게 작성하기면 됩니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">emd = <span class="number">256</span></span><br><span class="line">heads =<span class="number">8</span></span><br><span class="line">head_dim = emd // heads</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (head_dim * heads == emd), <span class="string">&#x27;embed size needs to be div by heads&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment"># 실행하면 (head_dim * heads == emd)이 True 때문에 아무 출력 결과가 없다.</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 앞의 값이 False라면</span></span><br><span class="line"><span class="keyword">assert</span> (head_dim * heads == emd + <span class="number">1</span>), <span class="string">&#x27;embed size needs to be div by heads&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="number">3</span> head_dim = emd // heads</span><br><span class="line">      <span class="number">4</span> </span><br><span class="line">----&gt; <span class="number">5</span> <span class="keyword">assert</span> (head_dim * heads == emd + <span class="number">1</span>), <span class="string">&#x27;embed size needs to be div by heads&#x27;</span></span><br><span class="line">      <span class="number">6</span> </span><br><span class="line"></span><br><span class="line">AssertionError: embed size needs to be div by heads</span><br><span class="line"><span class="comment"># 위와 같은 AssertionError가 생성된다.</span></span><br></pre></td></tr></table></figure><h2 id="Raise-사용-방법"><a href="#Raise-사용-방법" class="headerlink" title="Raise 사용 방법"></a>Raise 사용 방법</h2><ul><li>일부러 에러를 발생시켜야 되는 경우가 있는데, 이때 사용하는게 assert와 raise</li><li>raise는 assert와 달리 실행만 되면 에러가 생성됩니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Exception으로 문구를 작성해도 되고 안해도 됩니다(옵션)</span></span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment"># 결과-에러</span></span><br><span class="line">----&gt; <span class="number">1</span> <span class="keyword">raise</span> Exception(<span class="string">&#x27;아무 에러 문구&#x27;</span>)</span><br><span class="line">      <span class="number">2</span> </span><br><span class="line">      <span class="number">3</span> <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Exception: 아무 에러 문구</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 보통 이런식으로 조건문과 같이 사용합니다</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> b <span class="keyword">not</span> <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;a에 없는 값이라서 에러 발생 시킬게요.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment"># 출력 결과</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">5</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> b <span class="keyword">not</span> <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;a에 없는 값이라서 에러 발생 시킬게요.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출력 결과</span></span><br><span class="line">      <span class="number">4</span> <span class="keyword">if</span> b <span class="keyword">not</span> <span class="keyword">in</span> a:</span><br><span class="line">----&gt; <span class="number">5</span>     <span class="keyword">raise</span> Exception(<span class="string">&#x27;a에 없는 값이라서 에러 발생 시킬게요.&#x27;</span>)</span><br><span class="line">      <span class="number">6</span> </span><br><span class="line">      <span class="number">7</span> <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Exception: a에 없는 값이라서 에러 발생 시킬게요.</span><br></pre></td></tr></table></figure><h2 id="Try-Except-사용-방법"><a href="#Try-Except-사용-방법" class="headerlink" title="Try, Except 사용 방법"></a>Try, Except 사용 방법</h2><ul><li>try는 에러가 발생하더라도 그냥 작업을 진행하게 만들고 싶을 때 많이 사용됩니다.</li><li>except뒤 에 발생되는 <code>[에러 이름]</code> 그 뒤에 처리를 어떻게 할지 사용</li><li>에러가 나와도 그냥 pass를 원하면 <code>pass</code> 입력</li><li>예시를 보면 바로 이해되실 겁니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자 2개를 나눌때 나오는 에러 테스트입니다.</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a, b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>(<span class="string">&#x27;숫자 2개를 띄어쓰기를 사용해서 입력해주세요 : &#x27;</span>).split())</span><br><span class="line">    <span class="built_in">print</span>(a / b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:    <span class="comment"># 숫자를 0으로 나눠서 에러가 발생했을 때 실행됨</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;숫자를 0으로 나눌 수 없습니다.&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> a:      <span class="comment"># input값을 제대로 입력하지 않으면 실행</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;잘못된 입력입니다&#x27;</span>, a)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"><span class="comment"># 결과</span></span><br><span class="line">숫자 <span class="number">2</span>개를 띄어쓰기를 사용해서 입력해주세요 : <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3.0</span></span><br><span class="line">hi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과(zerodivision)</span></span><br><span class="line">숫자 <span class="number">2</span>개를 띄어쓰기를 사용해서 입력해주세요 : <span class="number">3</span> <span class="number">0</span></span><br><span class="line">숫자를 <span class="number">0</span>으로 나눌 수 없습니다.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과(valueeroor)</span></span><br><span class="line">숫자 <span class="number">2</span>개를 띄어쓰기를 사용해서 입력해주세요 : 3abd</span><br><span class="line">잘못된 입력입니다 invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">&#x27;3abd&#x27;</span></span><br><span class="line">hi</span><br></pre></td></tr></table></figure><ul><li>만약 어떤 에러인지 모르는 경우 테스트를하여 에러를 확인한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>(<span class="string">&#x27;숫자 2개를 띄어쓰기를 사용해서 입력해주세요 : &#x27;</span>).split())</span><br><span class="line"><span class="built_in">print</span>(a / b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;3 0&#x27;을 입력할 경우 &#x27;ZeroDivisionError&#x27;</span></span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">65</span>-a03c397788a2&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> a, b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>(<span class="string">&#x27;숫자 2개를 띄어쓰기를 사용해서 입력해주세요 : &#x27;</span>).split())</span><br><span class="line">----&gt; <span class="number">2</span> <span class="built_in">print</span>(a / b)</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;3abd&#x27;을 입력할 경우 &#x27;ValueError&#x27;</span></span><br><span class="line">----&gt; <span class="number">1</span> a, b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>(<span class="string">&#x27;숫자 2개를 띄어쓰기를 사용해서 입력해주세요 : &#x27;</span>).split())</span><br><span class="line">      <span class="number">2</span> <span class="built_in">print</span>(a / b)</span><br><span class="line"></span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">&#x27;3abd&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Assert-사용-방법&quot;&gt;&lt;a href=&quot;#Assert-사용-방법&quot; class=&quot;headerlink&quot; title=&quot;Assert 사용 방법&quot;&gt;&lt;/a&gt;Assert 사용 방법&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;예외 처리(try, raise)함수와 달리 </summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="Study,Python" scheme="http://inhwancho.github.io/tags/Study-Python/"/>
    
  </entry>
  
  <entry>
    <title>Attention 파악하기</title>
    <link href="http://inhwancho.github.io/2023/01/05/Study_folder/NLP(Natural_Language_Processing)/2023-01-05-attention/"/>
    <id>http://inhwancho.github.io/2023/01/05/Study_folder/NLP(Natural_Language_Processing)/2023-01-05-attention/</id>
    <published>2023-01-04T15:00:00.000Z</published>
    <updated>2023-01-04T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>참고 자료 : &lt;<a href="https://gaussian37.github.io/dl-concept-attention/">김진솔님 블로그</a>&gt;</li><li>참고 영상 : &lt;<a href="https://www.youtube.com/watch?v=U0s0f995w14&t=1122s">Aladdin youtube</a>&gt;</li></ul><h2 id="어텐션-모델"><a href="#어텐션-모델" class="headerlink" title="어텐션 모델"></a>어텐션 모델</h2><ul><li>seq2seq의 문제점을 해결하기 위한 모델이 Attention 모델이다.</li><li>어텐션은 중요한 부분에 더 집중을 하자는 요지로 만들어진 모델이며, 간단히 말해서 인코딩의 모든 은닉층의 정보를 디코더로 전달하는 것이다.</li><li>단어에 가중치를 주는 레이어가 추가됨(seq2seq에 어텐션 레이어가 추가됨)</li></ul><h2 id="마스크-Mask-란"><a href="#마스크-Mask-란" class="headerlink" title="마스크(Mask)란?"></a>마스크(Mask)란?</h2><ul><li><code>Masking</code> 라는 의미는 <code>가린다</code>는 의미이다.</li><li>디코더(Decoder)에서의 Self-Attention Layer 는 반드시 자기 자신 보다 앞쪽에 포지션에 해당하는 토큰들의 어텐션 스코어만 볼수있다.</li><li>아웃풋들이 주어졌을 때 뒤에 나오는 단어들은 볼 수 없다. (transformer도 같음)</li><li>Masking을 수학적으로 구현할 때는 Score 값을 -inf (마이너스 무한대) 값으로 표기함으로써 구현할 수 있습니다.<br>(값을 구하고 이를 -inf 값으로 변경)</li></ul><h3 id="MLM-Masked-Language-Model"><a href="#MLM-Masked-Language-Model" class="headerlink" title="MLM(Masked Language Model)"></a>MLM(Masked Language Model)</h3><ul><li><code>MLM</code>은 마스크가 무엇인지 명료하게 알려주는 모델입니다.</li><li>입력 문장에서 임의로 Token을 마스킹(masking), 그 Token을 맞추는 방식인 MLM 학습 진행</li><li>문장의 빈칸 채우기 문제를 학습</li><li>생성 모델 계열은(예를 들어 GPT) 입력의 다음 단어를 예측</li><li>MLM은 문장 내 랜덤한 단어를 마스킹 하고 이를 예측</li><li>입력의 15% 단어를 [MASK] Token으로 바꿔주어 마스킹</li><li>이 때 80%는 [MASK]로 바꿔주지만, 나머지 10%는 다른 랜덤 단어로, 또 남은 10%는 바꾸지 않고 그대로 둠</li><li>이는 튜닝 시 올바른 예측을 돕도록 마스킹에 노이즈를 섞음</li></ul><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://blog.kakaocdn.net/dn/LMyXN/btqzl4Ql7sH/ykzRZNWkc6rcb8ffU5Nrm1/img.png" alt="학습 방법"></p><h2 id="Scaled-Dot-Product-Attention-흔히-어텐션으로-알려진-Attention"><a href="#Scaled-Dot-Product-Attention-흔히-어텐션으로-알려진-Attention" class="headerlink" title="Scaled Dot Product Attention(흔히 어텐션으로 알려진 Attention)"></a>Scaled Dot Product Attention(흔히 어텐션으로 알려진 Attention)</h2><img width="704" alt="스크린샷 2023-01-05 오전 9 27 35" src="https://user-images.githubusercontent.com/111936229/210674989-c2839a05-6fa2-4238-a918-a5b5a90f86d7.png"><ul><li>입력값은 Q(query), K(key), V(value) 그리고 attention mask로 구성 되어 있습니다.</li><li>입력값 중 K, V는 같은 값 이어야 합니다.</li><li>Q까지 K, V와 동일한 경우는 self attention이라 합니다.</li><li>Query : 찾고자 하는 대상</li><li>Key   : 저장된 데이터를 찾고자 할 때 참조하는 값</li><li>Value : 저장되는 데이터</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dictionary 구조를 생각하시면 됩니다</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;key1&#x27;</span> : <span class="string">&#x27;value1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;key2&#x27;</span> : <span class="string">&#x27;value2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># query의 값으로는 &#x27;key1&#x27; 또는 &#x27;key2&#x27;가 될 수 있습니다.</span></span><br><span class="line"><span class="comment"># 이때 query와 같은 key값을 선택할 지 또는 가장 유사한 key값을 선택할 지는 문제에 따라 달라지게 됩니다.</span></span><br></pre></td></tr></table></figure><ul><li>여기서 중요한 점은 <code>Q와 Key값들이 얼마나 유사한지</code> 계산하는 것입니다.<br><ul><li>즉, (softmax를 적용하여 총 합이 1인) <code>Key값들과 Value의 값을 곱한 후 모두 더하면</code> <code>Attention value</code>가 되는 원리입니다.</li><li>Query는 Decoder의 은닉층(hidden state)가 됩니다.</li><li>Attention에서는 Encoder의 hidden state를 Key와 Value로 사용합니다.<br><br>(앞서 말한 self attention) 즉, Key와 Value는 같고 단어의 갯수 만큼 Key 값을 가집니다.</li></ul></li></ul><p>원-논문에서 <code>Compare</code>는 Fully Connected 방식의 연산을 이용하였고 <br><br><code>Aggregate</code>의 경우 모든 key-value에 대하여 벡터의 element-wise multiplication 연산을 한 후<br> element-wise sum을 하여 <code>Attention Value</code>를 생성합니다.<br>수식은 아래와 같습니다.</p><br><blockquote><p>$$ \text{Compare}(q, k_{j}) &#x3D; q \cdot k_{j} &#x3D; q^{T}k_{j} $$<br><br>$$ \text{Aggregate}(c, V) &#x3D; \sum_{j} c_{j}v_{j} $$</p></blockquote><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>아래 그림들로 요약을 하겠습니다.</li><li><code>Encoder</code>의 hidden state는 (Key, Value)로 사용됩니다. 아래의 그림에서 h는 Key와 Value로 사용됩니다.</li><li><code>Decoder</code>의 hidden state는 Query로 사용됩니다.</li></ul><br><ul><li><code>Decoder</code>에서 s라는 Query가 입력되고 그 Query와 모든 key 값인 h (아래 그림에서는 $$ h_{0}, h_{1}, h_{2} $$)와 <code>Comparison</code> 연산을 통하여 <code>유사도</code>를 구합니다. 값은 softmax를 거치기 때문에 확률 값처럼 총 합이 1이 됩니다.</li><li>그러면 Value에 해당하는 h와 유사도를 곱하고 결과들을 합하여 최종적으로 <code>a</code> 라는 <code>Attenen value</code>를 출력합니다.</li><li>수식으로 표현하면 다음과 같습니다.</li></ul><br><blockquote><p>$$ c_{i} &#x3D; \text{softmax}(s_{i}^{T}h_{j}) $$<br><br>$$ a_{i} &#x3D; \sum_{j}c_{i}h_{j} $$</p></blockquote><br><img width="866" alt="스크린샷 2023-01-06 오후 12 52 39" src="https://user-images.githubusercontent.com/111936229/210926682-c8810032-2dc5-4ccb-8f7f-1d737767f423.png"><br><ul><li>그리고 Decoder의 은닉층은 RNN(또는 LSTM)에서 연산하여 $$ s_{i} $$ → $$ s_{i+1} $$로 만듭니다.</li><li>그 후 $$ a_{i} $$와 $$ s_{i+1} $$을 합하고 ($$ v_{i} &#x3D; [s_{i}; a_{i-1}] $$) 하여 $$ v_{i+1} $$을 만듭니다. 이 값을 FC layer와 Softmax를 거쳐서 최종 출력인 $$ y_{i} $$를 출력합니다.</li></ul><img width="881" alt="스크린샷 2023-01-06 오후 12 54 02" src="https://user-images.githubusercontent.com/111936229/210926781-12a00b72-7ab9-42bc-86d6-44d154209871.png"><blockquote><p>attention에서 Query, Key, Value를 사용하지 않고 다른 방법으로 사용도 가능합니다.</p></blockquote><h2 id="바다나우-어텐션-vs-Dot-Product-Attention"><a href="#바다나우-어텐션-vs-Dot-Product-Attention" class="headerlink" title="바다나우 어텐션 vs Dot_Product_Attention"></a>바다나우 어텐션 vs Dot_Product_Attention</h2><ul><li>컨텍스트 벡터(context vector)</li></ul><blockquote><p>바다나우: 컨텍스트 벡터를 구할 때 <code>이전 시점의 은닉 상태</code>를 사용한다.<br>Dot_Product_Attention: 컨텍스트 벡터를 구할 때 현재 시점의 은닉 상태 st를 사용한다.</p></blockquote><ul><li>출력</li></ul><blockquote><p>바다나우: <code>현재 시점의 은닉 상태로부터 출력</code>이 나온다.<br>Dot_Product_Attention: 현재 시점의 은닉 상태는 RNN의 은닉 상태 역할만 하고, 새로운 벡터를 사용한다.</p></blockquote><ul><li>계산 속도</li></ul><blockquote><p>바다나우: 디코더의 은닉 상태를 구할 때 컨텍스트 벡터가 사용되므로 RNN의 재귀 연산이 수행될 때 컨텍스트 벡터가 구해질 때까지 기다려야 한다. <code>계산이 느림</code><br>Dot_Product_Attention: 계산이 빠름</p></blockquote><ul><li>인코더의 은닉 상태 사용</li></ul><blockquote><p>바다나우: <code>인코더의 모든 은닉 상태의 벡터를 본다.</code><br>Dot_Product_Attention: 특정 하이퍼파라미터 D에 대해 (2D+1)개의 부분집합 벡터만 본다.</p></blockquote><h2 id="셀프-어텐션이란"><a href="#셀프-어텐션이란" class="headerlink" title="셀프 어텐션이란?"></a>셀프 어텐션이란?</h2><ul><li><code>같은 문장 내</code>의 두 token 사이의 Attention을 계산하는 방식은, <code>Self-Attention</code>이라고 부른다.</li><li>Q, K, V 형태가 동일</li><li>반면, <code>서로 다른 두 문장</code>에 각각 존재하는 두 token 사이의 Attention을 계산하는 것을 <code>Cross-Attention</code>이라고 부른다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;참고 자료 : &amp;lt;&lt;a href=&quot;https://gaussian37.github.io/dl-concept-attention/&quot;&gt;김진솔님 블로그&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;참고 영상 : &amp;lt;&lt;a href=&quot;https://www</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="NLP,Study" scheme="http://inhwancho.github.io/tags/NLP-Study/"/>
    
  </entry>
  
  <entry>
    <title>SBERT(Sentence BERT) 개념</title>
    <link href="http://inhwancho.github.io/2023/01/04/Study_folder/NLP(Natural_Language_Processing)/2023-01-04-SBERT-nli/"/>
    <id>http://inhwancho.github.io/2023/01/04/Study_folder/NLP(Natural_Language_Processing)/2023-01-04-SBERT-nli/</id>
    <published>2023-01-03T15:00:00.000Z</published>
    <updated>2023-01-03T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SBERT-Sentence-BERT"><a href="#SBERT-Sentence-BERT" class="headerlink" title="SBERT(Sentence + BERT)"></a>SBERT(Sentence + BERT)</h2><ul><li><p>Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks(2019)의 논문에서 처음 등장하였다.<br><br>기존의 BERT는 학습시간이 너무 많이 걸리는 단점을 보완한 모델</p></li><li><p>Sentence-BERT 는 word embedding model이다. 워드임베딩이란 텍스트 분석을 위한 단어 표현에 사용되는 용어로, <br><br>일반적으로 벡터 공간에서 더 가까운 단어가 의미가 유사할 것으로 예상되도록 <code>단어의 의미를 인코딩하는 실수 값 벡터의 형태</code>입니다.</p></li><li><p>SBERT의 데이터는 2가지 종류로 구분됩니다.</p><ul><li>STS(Semantic Textual Similarity)</li><li>NLI(Natural Language Inference)</li></ul></li></ul><h2 id="STS"><a href="#STS" class="headerlink" title="STS"></a>STS</h2><ul><li>두 문장 사이의 문장간 similarity(의미적 유사성)의 정도를 평가하고 분류</li><li>보통 0(관련 없음)에서 5.0(거의 유사)사이의 값으로 분류</li></ul><h2 id="NLI-Natural-Language-Inference"><a href="#NLI-Natural-Language-Inference" class="headerlink" title="NLI(Natural Language Inference)"></a>NLI(Natural Language Inference)</h2><ul><li>두 문장(premise, hypothesis)을 입력 받아 두 관계를 </li><li>entailment(positive), contradiction(negative), neutral로 분류</li></ul><p>a : 나는 학원에 간다(anchor)<br>b : 나는 버스를 타고 학원에 간다(entailment)<br>c : 나는 헬스장에서 운동을 한다(contradiction)</p><p>학습 :<br>두 문장(s1, s2)이 초기화 된 siamese network(샴 네트워크)로 입력<br>두 입력 문장에 대한 임베딩 벡터값(e1, e2)을 추출<br>두 임베딩 벡터(e1, e2)에 대해 유사도를 계산<br>만약 두 입력 문장이 같은 class라면 거리가 가까워지도록, 다른 class라면 거리가 멀어지도록 weight을 조절하며 학습</p><ul><li>SBERT에서는 cost function으로 triplet loss을 사용 &#x3D;&#x3D;&gt; 앵커 문장과 동일(다른) 클래스 문장 거리</li><li>softmax를 사용하는 대신 -&gt; MNR loss(triplet loss와 유사) 사용</li></ul><h2 id="SBERT-finetuning하기-위한-개요"><a href="#SBERT-finetuning하기-위한-개요" class="headerlink" title="SBERT - finetuning하기 위한 개요"></a>SBERT - finetuning하기 위한 개요</h2><ul><li>NLI dataset(문장과의 관계도), 문장과의 유사도(거리) 두 가지가 필요하다.</li></ul><ol><li><p>triplet 구조로(엥커, Positive 문장, Negative 문장) NLI 데이터셋을 구성한다.</p><ul><li>예를 들면 아래와 같은 구조이다.(a,b,c)</li><li>a : 나는 학원에 간다(anchor)</li><li>b : 나는 버스를 타고 학원에 간다(entailment)</li><li>c : 나는 헬스장에서 운동을 한다(contradiction)</li></ul></li><li><p>pretrained BERT모델로 NLI 데이터를 문장 임베딩 벡터로 변환</p></li><li><p>MNR loss(MultipleNegativesRankingLoss) 함수를 이용하여 NLI 데이터를 파인튜닝</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SBERT-Sentence-BERT&quot;&gt;&lt;a href=&quot;#SBERT-Sentence-BERT&quot; class=&quot;headerlink&quot; title=&quot;SBERT(Sentence + BERT)&quot;&gt;&lt;/a&gt;SBERT(Sentence + BERT)&lt;/h2</summary>
      
    
    
    
    <category term="Study" scheme="http://inhwancho.github.io/categories/Study/"/>
    
    
    <category term="NLP,Study" scheme="http://inhwancho.github.io/tags/NLP-Study/"/>
    
  </entry>
  
</feed>
